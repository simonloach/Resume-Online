#!/usr/bin/env python3
"""
generate_resume.py
Clean HTML resume generator that reads `resume_data.yaml` and writes `html/index.html`.
Uses external Jinja template from assets/templates/ if available, otherwise fallback template.
"""
import os
from typing import Dict, Any, List, Optional

import yaml
import requests
from jinja2 import Template

# Fallback template if external template not found
FALLBACK_TEMPLATE = r"""
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>{{ personal_info.name }} - Resume</title>
  <style>
    body { font-family: Arial, Helvetica, sans-serif; color: #222; max-width: 900px; margin: 24px auto; }
    header { text-align: center; border-bottom: 2px solid #eee; padding-bottom: 8px; margin-bottom: 12px; }
    h1 { margin: 4px 0; }
    .meta { color: #666; font-size: 0.9rem; }
    .section { margin-top: 14px; }
    .section-title { font-weight: bold; color: #2c3e50; margin-bottom: 6px; }
    ul { margin: 4px 0 8px 18px; }
  </style>
</head>
<body>
  <header>
    <h1>{{ personal_info.name }}</h1>
    <div class="meta">{{ personal_info.email }} | {{ personal_info.phone }} | {{ personal_info.location }}</div>
  </header>

  <div class="section">
    <div class="section-title">Summary</div>
    <div>{{ about.summary }}</div>
  </div>

  <div class="section">
    <div class="section-title">Experience</div>
    {% for c in experience.corporate %}
      {% for p in c.positions %}
        <div class="job">
          <div><strong>{{ p.title }}</strong> ‚Äî <em>{{ c.company }}</em></div>
          <div class="meta">{{ p.duration }} ‚Ä¢ {{ p.location }}</div>
          {% if p.responsibilities %}
          <ul>
            {% for r in p.responsibilities[:6] %}
            <li>{{ r }}</li>
            {% endfor %}
          </ul>
          {% endif %}
        </div>
      {% endfor %}
    {% endfor %}
  </div>

  <footer style="margin-top:24px;color:#888;font-size:0.9rem">Generated by generate_resume.py</footer>
</body>
</html>
"""


def fetch_github_projects(username: str, token: Optional[str] = None) -> List[Dict[str, Any]]:
    """Fetch public repositories from GitHub API."""
    try:
        # Extract username from GitHub URL if needed
        if username.startswith("https://github.com/"):
            username = username.replace("https://github.com/", "").rstrip("/")
        
        url = f"https://api.github.com/users/{username}/repos"
        headers = {"Accept": "application/vnd.github+json"}
        
        # Add token if provided (for higher rate limits and private repos)
        if token:
            headers["Authorization"] = f"Bearer {token}"
        
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        repos = response.json()
        
        # Filter and format repositories
        projects = []
        for repo in repos:
            # Skip forks, archived repos, and repos without substantial descriptions
            if repo.get("fork", False) or repo.get("archived", False):
                continue
            
            description = repo.get("description", "")
            # Only include projects with descriptions longer than 50 characters
            if not description or len(description.strip()) <= 50:
                continue
                
            project = {
                "name": repo["name"].lower(),  # Convert name to lowercase
                "description": description,
                "url": repo["html_url"],
                "stars": repo.get("stargazers_count", 0),
                "language": repo.get("language", "Unknown"),
                "updated_at": repo.get("updated_at", ""),
                "topics": repo.get("topics", [])
            }
            projects.append(project)
        
        # Prioritize favorite projects
        priority_projects = []
        other_projects = []
        favorite_names = ["car-scraper", "resume-online"]
        
        for project in projects:
            if project["name"] in favorite_names:
                priority_projects.append(project)
            else:
                other_projects.append(project)
        
        # Sort priority projects by favorite order, then other projects by stars/activity
        priority_projects.sort(key=lambda x: favorite_names.index(x["name"]))
        other_projects.sort(key=lambda x: (x["stars"], x["updated_at"]), reverse=True)
        
        # Combine with favorites first, then fill with others
        final_projects = priority_projects + other_projects
        
        print(f"‚úÖ Fetched {len(final_projects)} GitHub projects for {username}")
        print(f"üìå Prioritized projects: {[p['name'] for p in priority_projects]}")
        return final_projects[:8]  # Return top 8 projects
        
    except requests.RequestException as e:
        print(f"‚ö†Ô∏è  Failed to fetch GitHub projects: {e}")
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è  Error processing GitHub projects: {e}")
        return []


def load_data(path: str = "resume_data.yaml") -> Dict[str, Any]:
    """Load resume data from YAML file."""
    with open(path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)


def render_html(data: Dict[str, Any]) -> str:
    """Render HTML using external template if available, otherwise fallback."""
    external_template = os.path.join("assets", "templates", "jinja_template.html")
    
    if os.path.exists(external_template):
        print(f"Using external template: {external_template}")
        with open(external_template, "r", encoding="utf-8") as f:
            template_content = f.read()
    else:
        print("Using fallback template")
        template_content = FALLBACK_TEMPLATE
    
    template = Template(template_content)
    return template.render(**data)


def write_html(html: str, out_path: str = "html/index.html") -> None:
    """Write rendered HTML to file."""
    os.makedirs(os.path.dirname(out_path), exist_ok=True)
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html)


def main() -> None:
    """Main function."""
    data = load_data()
    
    # Fetch GitHub projects if GitHub URL is provided
    github_url = data.get("personal_info", {}).get("social", {}).get("github")
    if github_url and (not data.get("projects") or len(data.get("projects", [])) == 0):
        print("üîç Fetching GitHub projects...")
        github_token = os.environ.get("GITHUB_TOKEN")  # Optional token for higher rate limits
        projects = fetch_github_projects(github_url, github_token)
        data["projects"] = projects
        
        if projects:
            print(f"üì¶ Added {len(projects)} GitHub projects to resume")
        else:
            print("‚ö†Ô∏è  No GitHub projects found or API request failed")
    
    html = render_html(data)
    write_html(html)
    print("‚úÖ index.html generated at html/index.html")


if __name__ == "__main__":
    main()